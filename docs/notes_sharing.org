#+TODO: TODO(t) | DONE(d) CANCELED(c)
#+STARTUP: logdone
#+STARTUP: lognotdone
#+STARTUP: inlineimages
#+STARTUP: indent
#+FILETAGS: :home:
#+TAGS: backend(b) frontend(f) 
#+TAGS:

* Auth
** Auth - positive sequence
 #+BEGIN_SRC plantuml :file images/auth_positive.png
   client -> server: POST /auth\nlogin=CorrectLogin&password=CorrectPassword
   server -> client: HTTP 302 Found\nSet-Cookie: session=ABCDEFGHJKLM
 #+END_SRC

 #+RESULTS:
 [[file:images/auth_positive.png]]
** Auth - negative sequence 
 #+BEGIN_SRC plantuml :file images/auth_negative.png
   client -> server: POST /auth\nlogin=WrongLogin&password=WrongPassword
   server -> client: HTTP 401 Unathorized
 #+END_SRC

 #+RESULTS:
 [[file:images/auth_negative.png]]
** Create user - positive sequence
 #+BEGIN_SRC plantuml :file images/auth_create_positive.png
   client -> server: POST /auth\nlogin=someLogin&password=somePassword&create=anything
   server -> client: HTTP 200 Ok\nUser someLogin created
 #+END_SRC

 #+RESULTS:
 [[file:images/auth_create_positive.png]]

** Create user - negative sequence
 #+BEGIN_SRC plantuml :file images/auth_create_negative.png
   client -> server: POST /auth\nlogin=existentLogin&password=somePassword&create=anything
   server -> client: HTTP 400 Bad request\nuser with login existentLogin already exists
 #+END_SRC

 #+RESULTS:
 [[file:images/auth_create_negative.png]]

* Notes
** Get all user notes - positive sequence
 #+BEGIN_SRC plantuml :file images/notes/get_positive.png
   client -> server: GET /notes
   server -> client: HTTP 200\n[{"id":1, "head":"title one", "body":"note test", "archived":false}]
 #+END_SRC

 #+RESULTS:
 [[file:images/notes/get_positive.png]]
** Create new user note - positive sequence
 #+BEGIN_SRC plantuml :file images/notes/post_create_new_positive.png
   client -> server: POST /notes
   server -> client: HTTP 200\n[{"id":2, "head":"", "body":"", "archived":false}]
 #+END_SRC

 #+RESULTS:
 [[file:images/notes/post_create_new_positive.png]]
